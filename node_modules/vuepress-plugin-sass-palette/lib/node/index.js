"use strict";Object.defineProperty(exports,"__esModule",{value:!0});var e=require("@vuepress/utils"),s=require("chokidar"),t=require("@mr-hope/vuepress-shared");function a(e){return e&&"object"==typeof e&&"default"in e?e:{default:e}}var l=a(s);const n=e.path.resolve(__dirname,"../../styles/empty.scss"),i=new t.Logger("vuepress-plugin-sass-palette"),r=s=>e.fs.pathExistsSync(s)?s:n,o=(e,s)=>e.writeTemp(`sass-palette/load-${s}.js`,`import "@sass-palette/${s}-inject";export default ()=>{};`),p=(e,s)=>e.writeTemp(`sass-palette/${s}-inject.scss`,`\n@use "sass:color";\n@use "sass:list";\n@use "sass:math";\n@use "sass:map";\n@use "sass:meta";\n\n@use "@sass-palette/helper";\n@use "@sass-palette/${s}-palette";\n\n$variables: meta.module-variables("${s}-palette");\n\n${e.env.isDebug?`\n@debug "${s} palette variables: #{meta.inspect($variables)}";\n@debug "${s} config variables: #{meta.inspect(meta.module-variables("${s}-config"))}";\n`:""}\n\n@each $name, $value in $variables {\n  $key: helper.camel-to-kebab($name);\n\n  @if meta.type-of($value) == number or meta.type-of($value) == string {\n    :root {\n      #{$key}: #{$value};\n    }\n  } @else if helper.color-islegal($value) {\n    @if meta.global-variable-exists("dark-selector", $module: "${s}-config") {\n      @include helper.inject-color($key, $value, $dark-selector: ${s}-config.$dark-selector);\n    } @else {\n      @include helper.inject-color($key, $value);\n    }\n  }\n}\n`),u=(e,{id:s,defaultConfig:t,defaultPalette:a,generator:l,userConfig:n,userPalette:i})=>e.writeTemp(`sass-palette/${s}-config.scss`,`\n@import "file:///${r(a)}";\n@import "file:///${r(t)}";\n@import "file:///${r(i)}";\n@import "file:///${r(n)}";\n@import "file:///${r(l)}";\n`),d=(e,{id:s,defaultPalette:t,generator:a,userPalette:l})=>e.writeTemp(`sass-palette/${s}-palette.scss`,`\n@import "file:///${r(t)}";\n@import "file:///${r(l)}";\n@import "file:///${r(a)}";\n`),c=(e,{id:s,userStyle:t})=>t?e.writeTemp(`sass-palette/${s}-style.scss`,`@forward "file:///${r(t)}";\n`):Promise.resolve(null),f=({id:s="hope",config:a=`.vuepress/styles/${s}-config.scss`,defaultConfig:n=e.path.resolve(__dirname,"../../styles/default/config.scss"),palette:r=`.vuepress/styles/${s}-palette.scss`,defaultPalette:f=e.path.resolve(__dirname,"../../styles/default/palette.scss"),generator:$=e.path.resolve(__dirname,"../../styles/empty.scss"),style:g=null},m)=>{const v=m.dir.source(a),y=m.dir.source(r),h=g?m.dir.source(g):null;return{name:`vuepress-plugin-sass-palette?${s}`,alias:{"@sass-palette/helper":e.path.resolve(__dirname,"../../styles/helper.scss"),[`@sass-palette/${s}-config`]:m.dir.temp(`sass-palette/${s}-config.scss`),[`@sass-palette/${s}-inject`]:m.dir.temp(`sass-palette/${s}-inject.scss`),[`@sass-palette/${s}-palette`]:m.dir.temp(`sass-palette/${s}-palette.scss`),...g?{[`@sass-palette/${s}-style`]:m.dir.temp(`sass-palette/${s}-style.scss`)}:{}},onInitialized:()=>(((e,s)=>{var a,l,n;const{bundler:i,bundlerConfig:r}=e.options;if(i.endsWith("vite")){const e=r,i=null===(n=null===(l=null===(a=e.viteOptions)||void 0===a?void 0:a.css)||void 0===l?void 0:l.preprocessorOptions)||void 0===n?void 0:n.scss.additionalData;e.viteOptions=t.mergeViteConfig(e.viteOptions,{css:{preprocessorOptions:{scss:{charset:!1,additionalData:async(e,t)=>"string"==typeof i?`@use "@sass-palette/${s}-config";\n${i}${e}`:"function"==typeof i?`@use "@sass-palette/${s}-config";\n${await i(e,t)}`:`@use "@sass-palette/${s}-config";\n${e}`}}}})}if(i.endsWith("webpack")){const t=e.options.bundlerConfig;t.scss||(t.scss={});const{additionalData:a}=t.scss,l=(e,t)=>"string"==typeof a?`@use "@sass-palette/${s}-config";\n${a}${e}`:"function"==typeof a?`@use "@sass-palette/${s}-config";\n${a(e,t)}`:`@use "@sass-palette/${s}-config";\n${e}`;t.scss.additionalData=l}})(m,s),Promise.all([o(m,s),p(m,s),u(m,{id:s,defaultConfig:n,defaultPalette:f,generator:$,userConfig:v,userPalette:y}),d(m,{id:s,defaultPalette:f,generator:$,userPalette:y}),c(m,{id:s,userStyle:h})]).then((()=>{m.env.isDebug&&i.info(`Style file for ${s} generated`)}))),onWatched:(e,t)=>{const a=l.default.watch(v,{cwd:e.dir.source(),ignoreInitial:!0}),r=()=>u(e,{id:s,defaultConfig:n,defaultPalette:f,generator:$,userConfig:v,userPalette:y}).then((()=>{e.env.isDebug&&i.info(`Style file for ${s} updated`)}));a.on("add",(()=>{r()})),a.on("unlink",(()=>{r()})),t.push(a);const o=l.default.watch(y,{cwd:e.dir.source(),ignoreInitial:!0}),p=()=>Promise.all([u(e,{id:s,defaultConfig:n,defaultPalette:f,generator:$,userConfig:v,userPalette:y}),d(e,{id:s,defaultPalette:f,generator:$,userPalette:y})]).then((()=>{e.env.isDebug&&i.info(`Style file for ${s} updated`)}));if(o.on("add",(()=>{p()})),o.on("unlink",(()=>{p()})),t.push(o),h){const a=l.default.watch(h,{cwd:e.dir.source(),ignoreInitial:!0}),n=()=>c(e,{id:s,userStyle:h}).then((()=>{e.env.isDebug&&i.info(`Style file for ${s} updated`)}));a.on("add",(()=>{n()})),a.on("unlink",(()=>{n()})),t.push(a)}},clientAppEnhanceFiles:m.dir.temp(`sass-palette/load-${s}.js`)}};exports.default=f,exports.removePalettePlugin=(e,s)=>{const t=e.pluginApi.plugins.findIndex((e=>e.name===`vuepress-plugin-sass-palette?${s}`));-1!==t&&e.pluginApi.plugins.splice(t,1)},exports.sassPalette=e=>["sass-palette",e],exports.sassPalettePlugin=f,exports.useSassPalettePlugin=(e,s)=>{e.pluginApi.plugins.every((e=>e.name!==`vuepress-plugin-sass-palette?${s.id}`))&&e.use(f,s)};
//# sourceMappingURL=index.js.map
